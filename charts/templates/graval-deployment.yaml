{{- define "gravaldb.url" -}}
postgresql://graval:$(POSTGRES_PASSWORD)@gravaldb:{{ .Values.gravaldb.service.port }}/graval
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: graval
  labels:
    {{- include "graval.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.graval.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "graval.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "graval.labels" . | nindent 8 }}
    spec:
      {{- with .Values.graval.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.graval.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.graval.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      runtimeClassName: nvidia-container-runtime
      initContainers:
        - name: init-tables
          image: {{ .Values.gravaldb.image }}
          command: ['sh', '-c']
          args:
            - |
              cat <<EOF > /tmp/init.sql
              DO \$\$
              BEGIN
                  CREATE TABLE IF NOT EXISTS miner_challenges (
                      uuid character varying NOT NULL,
                      seed bigint NOT NULL,
                      challenge character varying NOT NULL,
                      challenge_type character varying NOT NULL,
                      created_at timestamp without time zone DEFAULT now(),
                      CONSTRAINT miner_challenges_pkey PRIMARY KEY (uuid, seed, challenge_type)
                  );
              END;
              \$\$;
              EOF
              PGPASSWORD=$POSTGRES_PASSWORD psql -h gravaldb -U graval -d graval -f /tmp/init.sql
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gravaldb-secret
                  key: password
      containers:
        - name: graval
          image: "{{ .Values.graval.image }}"
          imagePullPolicy: {{ .Values.graval.imagePullPolicy }}
          command: ["poetry", "run", "python", "api/graval_server.py", "--port", "{{ .Values.graval.service.targetPort }}", "--validator-whitelist", "{{ join "," .Values.graval.validatorWhitelist }}"]
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gravaldb-secret
                  key: password
            - name: POSTGRES_URL
              value: {{ include "gravaldb.url" . }}
          ports:
            - name: http
              containerPort: {{ .Values.graval.service.targetPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: {{ .Values.graval.livenessProbe.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.graval.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.graval.livenessProbe.timeoutSeconds | default 5 }}
            successThreshold: {{ .Values.graval.livenessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .Values.graval.livenessProbe.failureThreshold | default 3 }}
          readinessProbe:
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: {{ .Values.graval.readinessProbe.initialDelaySeconds | default 10 }}
            periodSeconds: {{ .Values.graval.readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.graval.readinessProbe.timeoutSeconds | default 5 }}
            successThreshold: {{ .Values.graval.readinessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .Values.graval.readinessProbe.failureThreshold | default 3 }}
          resources:
            {{- toYaml .Values.graval.resources | nindent 12 }}
